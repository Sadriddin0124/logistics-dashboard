"use client";

import { ChangeEvent, ReactNode, useState, useEffect, useCallback } from "react";
import { Button } from "@/components/ui/button";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ChevronRight, ChevronDown, Pencil, RefreshCcw } from "lucide-react";
import { useRouter } from "next/router";
import { useMutation, useQuery } from "@tanstack/react-query";
import {
  editCategoryActive,
  fetchCategories,
  syncCategories,
} from "@/lib/actions/categories";
import { ICategory, Product } from "@/types/categories";
import { Switch } from "@/components/ui/switch";
import { queryClient } from "@/components/ReactQueryProvider";
import { toast } from "react-toastify";
import { Input } from "@/components/ui/input";
import SearchMarker from "@/components/SearchMarker";
import { filterCategories, filterCategoriesByActive } from "@/lib/functions";

export default function CategoriesList() {
  const [activeCategory, setActiveCategory] = useState<string[]>([]);
  const [filterButton, setFilterButton] = useState<null | boolean>(null);
  const [search, setSearch] = useState<string>("");
  const [activeCat, setActiveCat] = useState<string>("");

  const { data: categoryList, isLoading } = useQuery<ICategory[]>({
    queryKey: ["categories"],
    queryFn: fetchCategories,
  });

  const [categories, setCategories] = useState<ICategory[]>([]);
  const { push } = useRouter();

  useEffect(() => {
    if (!isLoading && categoryList ) {
      const sortedCategories = [...categoryList].sort(
        (a, b) => (b?.children?.length ?? 0) - (a?.children?.length ?? 0)
      );
      setCategories(sortedCategories);
    }
  }, [categoryList, isLoading]);

  const toggleExpand = (id: string) => {
    setActiveCategory((prevActiveCategory) => {
      if (prevActiveCategory.includes(id)) {
        return prevActiveCategory.filter((categoryId) => categoryId !== id);
      } else {
        return [...prevActiveCategory, id];
      }
    });
  };

  const { mutate, isPending } = useMutation({
    mutationFn: ({ id, active }: { id: string; active: boolean }) =>
      editCategoryActive(id, active),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["categories"] });
    },
    onError: () => {
      toast.error("Kategoriyani yangilashda xatolik!");
    },
  });


  const handleSearchAndFilter = useCallback(() => {
    if (!categoryList || !Array.isArray(categoryList)) {
      console.error("Invalid categoryList value");
      setCategories([]);
      return;
    }
  
    let filteredCategories = [...categoryList]; // Base data
  
    // Apply active/inactive/all filter
    if (filterButton !== null) {
      filteredCategories = filterCategoriesByActive(filteredCategories, filterButton);
    }
  
    // If search value is empty, set the categories to all categories
    if (search) {
      filteredCategories = filterCategories(filteredCategories, search);
    } else if (filterButton === null) {
      // If search is empty and no active/inactive filter is applied, set to all categories
      setCategories(categoryList);
      return;  // Exit early to prevent setting filtered categories when search is empty
    }
  
    setCategories(filteredCategories);
  }, [categoryList, filterButton, search]);
  
  useEffect(() => {
    handleSearchAndFilter();
  }, [handleSearchAndFilter]);
  
  
  const renderCategory = (
    category: ICategory | Product,
    isSubcategory = false
  ): ReactNode => {
    const childrenCount = category.children?.length ?? 0;

    const toggleCategoryStatus = (id: string, active: boolean) => {
      mutate({ id, active });
    };

    return (
      <>
        <TableRow
          key={category.id}
          className={`${
            activeCat === category?.id
              ? "bg-slate-200 cursor-pointer hover:bg-slate-200"
              : category.children && !isSubcategory
              ? "hover:bg-slate-200 cursor-pointer"
              : ""
          }`}
          onClick={() => {
            setActiveCat(category?.id as string);
          }}
        >
          <TableCell onClick={() => toggleExpand(category?.id as string)}>
            <div className="flex items-center w-full justify-between">
              <div
                className={`flex ${
                  !category.children && category?.content_type === "product"
                    ? "pl-12"
                    : childrenCount === 0
                    ? "py-[6px] pl-4"
                    : isSubcategory
                    ? "pl-6"
                    : ""
                }`}
              >
                {childrenCount > 0 && (
                  <span onClick={() => toggleExpand(category?.id as string)}>
                    {activeCategory.includes(category.id as string) ? (
                      <ChevronDown className="h-4 w-4" />
                    ) : (
                      <ChevronRight className="h-4 w-4" />
                    )}
                  </span>
                )}
                <span className={"pl-1"}>
                  <SearchMarker name={category?.name_uz} search={search} />
                </span>
              </div>
            </div>
          </TableCell>
          <TableCell>
            <Switch
              checked={category?.active}
              disabled={isPending}
              onCheckedChange={() =>
                toggleCategoryStatus(
                  category?.id as string,
                  category?.active as boolean
                )
              }
            />
          </TableCell>
          <TableCell
            onClick={() => {
              push(
                `/categories/info?id=${category?.id}&is_parent=${
                  childrenCount > 0 ? "true" : "false"
                }`
              );
            }}
          >
            <Button variant="ghost">
              <Pencil />
            </Button>
          </TableCell>
        </TableRow>

        {
        activeCategory.includes(category.id as string) &&
          category.children &&
          category.children
            .sort((a, b) => {
              const aLength = a?.children?.length ?? 0;
              const bLength = b?.children?.length ?? 0;
              return bLength - aLength;
            })
            .map((child) => renderCategory(child, true))}
      </>
    );
  };
  const handleSearch = (e: ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    // const searchedCategories = filterCategories(categories, value)
    setSearch(value);
      // const sortedCategories = [...(categoryList as ICategory[])].sort(
      //   (a, b) => (b?.children?.length ?? 0) - (a?.children?.length ?? 0)
      // );
      // setCategories(value ? searchedCategories : sortedCategories);
  };
  
  const handleFilter = (value: null | boolean) => {
    // const categoriesActive = filterCategoriesByActive(categories, true)
    // const categoriesInActive = filterCategoriesByActive(categories, false)
    // const categoriesAll = filterCategoriesByActive(categories, null)
    setFilterButton(value);
    // setCategories(value ? categoriesActive : value === null ? categoriesAll : categoriesInActive)
  };
  const { mutate: syncMutation, isPending: syncLoad } = useMutation({
    mutationFn: syncCategories,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["categories"] });
      toast.success("Sinxronlash muvaffaqiyatli amalga oshirildi!");
    },
    onError: () => {
      toast.error("Sinxronlashda xatolik");
    },
  });

  const handleSync = () => {
    syncMutation();
  };
  return (
    <div className="container mx-auto p-4">
      <div className="py-3">
        <h2 className="text-[24px] font-bold">Kategoriyalar</h2>
        <div className="flex items-center gap-4 py-4">
          <Input
            placeholder="Qidirish..."
            value={search}
            onChange={handleSearch}
            className="max-w-sm"
          />
          <Button
            variant={filterButton === null ? "default" : "outline"}
            onClick={() => {
              handleFilter(null);
            }}
          >
            Barchasi
          </Button>
          <Button
            variant={filterButton === false ? "default" : "outline"}
            onClick={() => handleFilter(false)}
          >
            Nofaol
          </Button>
          <Button
            variant={filterButton === true ? "default" : "outline"}
            onClick={() => handleFilter(true)}
          >
            Faol
          </Button>
          <Button size="icon" className="text-white" onClick={handleSync}>
            <span>
              <RefreshCcw
                className={`h-4 w-4 ${syncLoad ? "animate-spin" : ""}`}
              />
            </span>
          </Button>
        </div>
      </div>
      <Table>
        <TableHeader className="font-bold">
          <TableRow className="bg-gray-100">
            <TableHead className="font-bold">Mahsulot nomi (O`z)</TableHead>
            <TableHead className="font-bold">Holati</TableHead>
            <TableHead className="font-bold">Amallar</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {!isLoading &&
            Array.isArray(categories) &&
            categories
              .map((category) => renderCategory(category))}
        </TableBody>
      </Table>
    </div>
  );
}
